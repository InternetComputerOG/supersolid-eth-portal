type Time = int;
type SwapEntry = 
 record {
   arb_remaining_balance: nat64;
   base_remaining_balance: nat64;
   caller: text;
   request: Request;
   timestamp: Time;
 };
type ServiceRequest = 
 record {
   caller: text;
   data: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: Request;
 };
type Result = 
 variant {
   err: text;
   ok: nat64;
 };
type Request = 
 record {
   destination_address: text;
   destination_chain: nat64;
   eth_amount: nat64;
 };
type Hex = text;
type ErrorEntry = 
 record {
   arb_remaining_balance: nat64;
   base_remaining_balance: nat64;
   caller: text;
   description: text;
   reimbursed: bool;
   request: opt Request;
   timestamp: Time;
 };
type Entry = 
 variant {
   Error: ErrorEntry;
   Swap: SwapEntry;
 };
type DEMO = 
 service {
   decode_request_data: (Hex) -> (Result_1);
   get_balances: () -> (BalancesResult);
   get_logs: () -> (vec record {
                          nat;
                          Entry;
                        });
   get_request_hex: (nat64, text, float64) -> (Hex);
   hex_to_nat64: (Hex) -> (Result);
   nat64_to_hex: (nat64) -> (Hex);
   poll_requests: () -> (vec ServiceRequest);
   turn_off: () -> (BalancesResult);
   turn_on: () -> (BalancesResult);
 };
type BalancesResult = 
 variant {
   err: text;
   ok: Balances;
 };
type Balances = 
 record {
   arbitrum: nat64;
   base: nat64;
 };
service : () -> DEMO
